-- SQL Script for Advanced Database Management Project
-- Date: March 07, 2025
-- Description: This script creates tables, populates them, sets up security, optimizes queries, and automates processes.

-- ========================================
-- Chapter 1: Preparing Your Relational Schema
-- ========================================

-- Create Tables
CREATE TABLE Titles (
    id VARCHAR2(50) PRIMARY KEY,
    title VARCHAR2(255) NOT NULL,
    type VARCHAR2(50) NOT NULL,
    description CLOB,
    release_year NUMBER(4) NOT NULL,
    age_certification VARCHAR2(10),
    runtime NUMBER(5),
    genres CLOB,
    production_countries CLOB,
    seasons NUMBER(3),
    imdb_id VARCHAR2(20) UNIQUE,
    imdb_score NUMBER(3, 1),
    imdb_votes NUMBER,
    tmdb_popularity NUMBER,
    tmdb_score NUMBER(3, 1),
    last_updated TIMESTAMP(6) -- Added for Chapter 4 automation
);

CREATE TABLE Credits (
    person_id NUMBER NOT NULL,
    id VARCHAR2(50) NOT NULL,
    name VARCHAR2(255) NOT NULL,
    character VARCHAR2(255),
    role VARCHAR2(50) NOT NULL,
    PRIMARY KEY (person_id, id),
    FOREIGN KEY (id) REFERENCES Titles(id)
);

CREATE TABLE Genres (
    genre_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title_id VARCHAR2(50) NOT NULL,
    genre VARCHAR2(50) NOT NULL,
    FOREIGN KEY (title_id) REFERENCES Titles(id) ON DELETE CASCADE
);

CREATE TABLE Production_Countries (
    country_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title_id VARCHAR2(50) NOT NULL,
    country VARCHAR2(50) NOT NULL,
    FOREIGN KEY (title_id) REFERENCES Titles(id) ON DELETE CASCADE
);

CREATE TABLE People (
    person_id NUMBER PRIMARY KEY,
    name VARCHAR2(255) NOT NULL
);

CREATE TABLE Roles (
    role_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title_id VARCHAR2(50) NOT NULL,
    person_id NUMBER NOT NULL,
    role VARCHAR2(50) NOT NULL,
    character VARCHAR2(255),
    FOREIGN KEY (title_id) REFERENCES Titles(id) ON DELETE CASCADE,
    FOREIGN KEY (person_id) REFERENCES People(person_id) ON DELETE CASCADE
);

-- Populate Tables
-- Populate Genres Table
INSERT INTO Genres (title_id, genre)
SELECT id, TRIM(REGEXP_SUBSTR(genres, '[^,]+', 1, LEVEL))
FROM Titles
CONNECT BY LEVEL <= REGEXP_COUNT(genres, ',') + 1
AND PRIOR id = id
AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL;

-- Populate Production_Countries Table
INSERT INTO Production_Countries (title_id, country)
SELECT id, TRIM(REGEXP_SUBSTR(production_countries, '[^,]+', 1, LEVEL))
FROM Titles
CONNECT BY LEVEL <= REGEXP_COUNT(production_countries, ',') + 1
AND PRIOR id = id
AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL;

-- Populate People Table (From Credits)
INSERT INTO People (person_id, name)
SELECT DISTINCT person_id, name
FROM Credits;

-- Populate Roles Table (From Credits)
INSERT INTO Roles (title_id, person_id, role, character)
SELECT id, person_id, role, character
FROM Credits;

-- Validate Data (Sample Checks)
SELECT * FROM Genres WHERE ROWNUM <= 10;
SELECT * FROM Production_Countries WHERE ROWNUM <= 10;
SELECT * FROM People WHERE ROWNUM <= 10;
SELECT * FROM Roles WHERE ROWNUM <= 10;

-- ========================================
-- Chapter 2: Security and User Management
-- ========================================

-- Create Users
CREATE USER C##Siddartha_Admin IDENTIFIED BY "1234";
GRANT CONNECT, RESOURCE, DBA TO C##Siddartha_Admin;

CREATE USER C##Manager_Shreeram IDENTIFIED BY "Manager@123";
GRANT CONNECT TO C##Manager_Shreeram;
GRANT SELECT, INSERT, UPDATE, DELETE ON Titles TO C##Manager_Shreeram;
GRANT SELECT, INSERT, UPDATE, DELETE ON Credits TO C##Manager_Shreeram;

CREATE USER C##Abbas_regular IDENTIFIED BY "User@123";
GRANT CONNECT TO C##Abbas_regular;
GRANT SELECT ON Titles TO C##Abbas_regular;
GRANT SELECT ON Credits TO C##Abbas_regular;

-- Password Management
ALTER PROFILE DEFAULT LIMIT
    PASSWORD_LIFE_TIME 30
    PASSWORD_REUSE_MAX 5;

-- Limit Sensitive Data Access with a View
CREATE VIEW Public_Titles AS
SELECT title, type, release_year
FROM Titles;
GRANT SELECT ON Public_Titles TO C##Abbas_regular;

-- Verification (Test Admin Privileges)
CONNECT C##Siddartha_Admin/"1234";
SELECT * FROM Titles;
INSERT INTO Titles (id, title, type, release_year) 
VALUES ('tm99999', 'Test Movie', 'MOVIE', 2024);

-- Assign Roles (Assuming roles are created separately if needed)
-- GRANT Admin_Role TO C##Siddartha_Admin;
-- GRANT Manager_Role TO C##Manager_Shreeram;
-- GRANT Regular_User_Role TO C##Abbas_regular;
REVOKE INSERT, UPDATE, DELETE ON Titles FROM C##Abbas_regular;

-- ========================================
-- Chapter 3: Queries and Optimization
-- ========================================

-- Query 2: Count the Number of Movies by Genre
SELECT g.genre, COUNT(*) AS movie_count
FROM Titles t
JOIN Genres g ON t.id = g.title_id
WHERE t.type = 'MOVIE'
GROUP BY g.genre
ORDER BY movie_count DESC;

-- Indexing for Optimization
CREATE INDEX idx_titles_imdb_score ON Titles(imdb_score);
CREATE INDEX idx_genres_title_id ON Genres(title_id);
CREATE INDEX idx_titles_release_year_genre ON Titles(release_year, type);
CREATE INDEX idx_release_year ON Titles(release_year);
CREATE INDEX idx_genre ON Genres(genre);

-- Materialized Views
CREATE MATERIALIZED VIEW mv_top_movies_new AS
SELECT title, imdb_score, genre
FROM (
    SELECT t.title, t.imdb_score, g.genre
    FROM Titles t
    JOIN Genres g ON t.id = g.title_id
    WHERE t.type = 'MOVIE'
    ORDER BY t.imdb_score DESC
)
WHERE ROWNUM <= 100;

CREATE MATERIALIZED VIEW mv_top_movies AS
SELECT title, imdb_score
FROM (
    SELECT title, imdb_score
    FROM Titles
    WHERE type = 'MOVIE'
    ORDER BY imdb_score DESC
)
WHERE ROWNUM <= 100;

-- Partitioning Tables
CREATE TABLE Titles_partitioned (
    id VARCHAR2(50) NOT NULL,
    title VARCHAR2(255) NOT NULL,
    release_year NUMBER(4),
    imdb_score NUMBER(3, 1),
    type VARCHAR2(50),
    PRIMARY KEY (id)
)
PARTITION BY RANGE (release_year) (
    PARTITION p1 VALUES LESS THAN (2000),
    PARTITION p2 VALUES LESS THAN (2010),
    PARTITION p3 VALUES LESS THAN (2020),
    PARTITION p4 VALUES LESS THAN (MAXVALUE)
);

-- Analyzing Execution Plans
EXPLAIN PLAN FOR
SELECT t.title, t.imdb_score
FROM Titles t
WHERE t.release_year > 2000;

-- View Execution Plan
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- ========================================
-- Chapter 4: Automation of the Information System
-- ========================================

-- Create Monthly_Reports Table
CREATE TABLE Monthly_Reports (
    report_date DATE NOT NULL,
    total_movies NUMBER,
    avg_imdb_score NUMBER(3, 1)
);

-- Update Titles with last_updated (for testing automation)
UPDATE Titles SET last_updated = SYSTIMESTAMP WHERE last_updated IS NULL;

-- Stored Procedure for Monthly Report
CREATE OR REPLACE PROCEDURE generate_monthly_report
IS
BEGIN
    INSERT INTO Monthly_Reports (report_date, total_movies, avg_imdb_score)
    SELECT SYSDATE, COUNT(*), AVG(imdb_score)
    FROM Titles
    WHERE last_updated >= ADD_MONTHS(SYSDATE, -1);

    DBMS_OUTPUT.PUT_LINE('Monthly report generated successfully.');
END;
/

-- Test the Procedure
EXEC generate_monthly_report;

-- Verify Results
SELECT * FROM Monthly_Reports;

-- Check Table Accessibility
SELECT table_name FROM user_tables WHERE table_name IN ('TITLES', 'MONTHLY_REPORTS');
DESC Titles;

-- End of Script